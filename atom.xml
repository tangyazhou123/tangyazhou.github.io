<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>打小有点憨儿</title>
  
  <subtitle>工欲善其事，必先利其器</subtitle>
  <link href="https://tangyazhou123.github.io/atom.xml" rel="self"/>
  
  <link href="https://tangyazhou123.github.io/"/>
  <updated>2021-10-08T13:48:07.002Z</updated>
  <id>https://tangyazhou123.github.io/</id>
  
  <author>
    <name>Yazhou Tang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>高斯扩散模型与Python实现</title>
    <link href="https://tangyazhou123.github.io/2021/09/17/arcpy%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
    <id>https://tangyazhou123.github.io/2021/09/17/arcpy%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</id>
    <published>2021-09-17T15:16:39.755Z</published>
    <updated>2021-10-08T13:48:07.002Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.loli.net/2021/09/27/vPi4LrAKhnNdp9u.png" alt="arcpy"></p><h2 id="高斯扩散模型"><a href="#高斯扩散模型" class="headerlink" title="高斯扩散模型"></a>高斯扩散模型</h2><p>高斯模型分为高斯烟羽模型与高斯烟团模型。  </p><h3 id="高斯烟团扩散模型"><a href="#高斯烟团扩散模型" class="headerlink" title="高斯烟团扩散模型"></a>高斯烟团扩散模型</h3><p>烟团扩散模型以一系列分离的 、又相互重叠的具有有限大小的“烟团”来模拟连续排放的烟流 ，能够对烟团在非均匀性流场中的运动进行模拟，模型结构简单、易于计算。</p><h4 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h4><h5 id="数据来源"><a href="#数据来源" class="headerlink" title="数据来源"></a>数据来源</h5><p>烟团的运动轨迹与所处的风场变化有关，流场数据在NCEP（美国国家环境预测中心）官网的GDAS（全球数据同化预报系统）系统获取。GDAS系统包含不同压力面上6h一次（国际标准时间00 06 12 18h）的数据集，7天输出一次数据，文件名为gdas1.mmmyy.w#，# 1、2、3、4、5，分别代表1-7天、8-14天、15-21天、22-28天、29-end。每个文件大约500M，数据量非常大。我推荐使用官网的<a href="https://nomads.ncep.noaa.gov/cgi-bin/filter_fnl.pl">数据过滤网址</a>，对研究的条件、变量筛选后，得到的grib2文件只有11M，下载非常快，也利于数据解析。</p><h5 id="数据爬取"><a href="#数据爬取" class="headerlink" title="数据爬取"></a>数据爬取</h5><p>如果需要对长时间的数据进行筛选，手动筛选下载不现实，用上爬虫。</p><p>对比不同观测时间的下载链接        </p><p>筛选条件及变量1：20211001 00：00   0.01mb subregion = all var = VGRD</p><p><a href="https://nomads.ncep.noaa.gov/cgi-bin/filter_gdas_0p25.pl?file=gdas.t00z.pgrb2.0p25.f000&amp;lev_0.01_mb=on&amp;var_VGRD=on&amp;subregion=&amp;leftlon=0&amp;rightlon=360&amp;toplat=90&amp;bottomlat=-90&amp;dir=/gdas.20211001/00/atmos">https://nomads.ncep.noaa.gov/cgi-bin/filter_gdas_0p25.pl?file=gdas.t00z.pgrb2.0p25.f000&amp;lev_0.01_mb=on&amp;var_VGRD=on&amp;subregion=&amp;leftlon=0&amp;rightlon=360&amp;toplat=90&amp;bottomlat=-90&amp;dir=%2Fgdas.20211001%2F00%2Fatmos</a></p><p>筛选条件及变量2：2020930 18：00      0.01mb subregion = all var = VGRD</p><p><a href="https://nomads.ncep.noaa.gov/cgi-bin/filter_gdas_0p25.pl?file=gdas.t18z.pgrb2.0p25.f000&amp;lev_0.01_mb=on&amp;var_VGRD=on&amp;subregion=&amp;leftlon=0&amp;rightlon=360&amp;toplat=90&amp;bottomlat=-90&amp;dir=/gdas.20210930/18/atmos">https://nomads.ncep.noaa.gov/cgi-bin/filter_gdas_0p25.pl?file=gdas.t18z.pgrb2.0p25.f000&amp;lev_0.01_mb=on&amp;var_VGRD=on&amp;subregion=&amp;leftlon=0&amp;rightlon=360&amp;toplat=90&amp;bottomlat=-90&amp;dir=%2Fgdas.20210930%2F18%2Fatmos</a></p><p>网址只有时间发生了改变，利用时间循环取数据。    </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="comment"># 取20210926 00：00至20210927 18：00 UGRD/VGRD数据</span></span><br><span class="line"><span class="comment"># 风速由U/V组成，也叫经向风速，和纬向风速，可以根据反正切函数得到风向</span></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> d <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20210926</span>,<span class="number">20210928</span>):</span><br><span class="line"><span class="keyword">for</span> h <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">00</span>,<span class="number">19</span>,<span class="number">6</span>):</span><br><span class="line"><span class="comment"># 由于十进制数前不能加0，因此出现00/06，需要对网址特殊处理</span></span><br><span class="line">    url = <span class="string">&quot;https://nomads.ncep.noaa.gov/cgi-bin/filter_gdas_0p25.pl?file=gdas.t&quot;</span> +<span class="built_in">str</span>(h)+<span class="string">&quot;z.pgrb2.0p25.f000&amp;lev_100_m_above_ground=on&amp;var_UGRD=on&amp;var_VGRD=on&amp;subregion=&amp;leftlon=75&amp;rightlon=95&amp;toplat=50&amp;bottomlat=30&amp;dir=%2Fgdas.&quot;</span> + <span class="built_in">str</span>(d) + <span class="string">&quot;%2F&quot;</span> + <span class="built_in">str</span>(h) + <span class="string">&quot;%2Fatmos&quot;</span>   </span><br><span class="line">    <span class="keyword">if</span> h == <span class="number">0</span> <span class="keyword">or</span> h == <span class="number">6</span>:</span><br><span class="line">            url = <span class="string">&quot;https://nomads.ncep.noaa.gov/cgi-bin/filter_gdas_0p25.pl?file=gdas.t0&quot;</span> +<span class="built_in">str</span>(h)+<span class="string">&quot;z.pgrb2.0p25.f000&amp;lev_100_m_above_ground=on&amp;var_UGRD=on&amp;var_VGRD=on&amp;subregion=&amp;leftlon=75&amp;rightlon=95&amp;toplat=50&amp;bottomlat=30&amp;dir=%2Fgdas.&quot;</span> + <span class="built_in">str</span>(d) + <span class="string">&quot;%2F0&quot;</span> + <span class="built_in">str</span>(h) +<span class="string">&quot;%2Fatmos&quot;</span></span><br><span class="line">        r = requests.get(url)</span><br><span class="line">        count +=<span class="number">1</span></span><br><span class="line"><span class="comment"># 输出grib2文件</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;C:\\data\\&quot;</span>+<span class="string">&quot;count.csv&quot;</span>, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(r)</span><br></pre></td></tr></table></figure><p>grib2文件输出如下图：</p><p><img src="https://i.loli.net/2021/10/01/G1iz2cxqaN3Xtsr.png" alt="1"></p><p>grib2文件的解析工具是<a href="https://github.com/lecay/wgrib2.git">wgrib2</a>，在cmd中运行wgrib2可以得到帮助文档。这里提供几个常见命令使用，运行环境是python3.9。        </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="comment"># 查询目录 -s</span></span><br><span class="line">os.chdir(<span class="string">r&quot;C:\wgrib2&quot;</span>)</span><br><span class="line">os.system(<span class="string">&quot;wgrib2.exe  1.f000.grib2  -s&quot;</span>)</span><br><span class="line"><span class="number">1</span>:<span class="number">0</span>:d=<span class="number">2021092600</span>:UGRD:<span class="number">100</span> m above ground:anl:</span><br><span class="line"><span class="number">2</span>:<span class="number">6740</span>:d=<span class="number">2021092600</span>:VGRD:<span class="number">100</span> m above ground:anl:</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 匹配变量输出至csv/text -match</span></span><br><span class="line">os.system(<span class="string">&quot;wgrib2.exe  gdaswave.t00z.global.0p16.f000.grib2  -match :UVRD -csv/text *.csv/*.txt&quot;</span>)</span><br></pre></td></tr></table></figure><h5 id="数据存储"><a href="#数据存储" class="headerlink" title="数据存储"></a>数据存储</h5><p>wgrib2目前不能直接存mysql，可以先存进csv。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">os.chdir(<span class="string">r&quot;C:\wgrib2&quot;</span>)</span><br><span class="line"><span class="comment"># 注意空格</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">9</span>):</span><br><span class="line">    os.system(<span class="string">&quot;wgrib2 &quot;</span> + <span class="string">&quot;C:\\data\\&quot;</span> + <span class="built_in">str</span>(i) + <span class="string">&quot;.f000&quot;</span> + <span class="string">&quot; -d 1 &quot;</span> + <span class="string">&quot;-csv &quot;</span> + <span class="string">&quot;C:\\data\\&quot;</span> + <span class="built_in">str</span>(i) + <span class="string">&quot;u.csv&quot;</span>)</span><br><span class="line">    os.system(<span class="string">&quot;wgrib2 &quot;</span> + <span class="string">&quot;C:\\data\\&quot;</span> + <span class="built_in">str</span>(i) + <span class="string">&quot;.f000&quot;</span> + <span class="string">&quot; -d 2 &quot;</span> + <span class="string">&quot;-csv &quot;</span> + <span class="string">&quot;C:\\data\\&quot;</span> + <span class="built_in">str</span>(i) + <span class="string">&quot;v.csv&quot;</span>)</span><br></pre></td></tr></table></figure><p>前面数据一般是存储在csv，不便于处理字段，将csv数据插入数据库。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pymysql <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建连接</span></span><br><span class="line">conn = connect(host=<span class="string">&#x27;localhost&#x27;</span>, port=<span class="number">3306</span>, user=<span class="string">&#x27;root&#x27;</span>, password=<span class="string">&#x27;123456&#x27;</span>, database=<span class="string">&#x27;rkpro&#x27;</span>, charset=<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line"><span class="comment"># 获得Cursor对象</span></span><br><span class="line">cursor = conn.cursor()</span><br><span class="line"><span class="comment"># *u.csv打包成list</span></span><br><span class="line"><span class="built_in">id</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">9</span>):</span><br><span class="line">    data = pd.read_csv(<span class="string">&quot;C:\\data\\&quot;</span> + <span class="built_in">str</span>(i) + <span class="string">&quot;u.csv&quot;</span>, header=<span class="literal">None</span>)</span><br><span class="line">    lists = data.values.tolist()</span><br><span class="line">    <span class="keyword">for</span> ls <span class="keyword">in</span> lists:</span><br><span class="line">        <span class="built_in">id</span> += <span class="number">1</span></span><br><span class="line">        insert = <span class="string">&quot;insert ignore into traj (id, type, lat, lng , speed, height, createtime) values(\&quot;%s\&quot;,\&quot;%s\&quot;,\&quot;%s\&quot;,\&quot;%s\&quot;,\&quot;%s\&quot;,\&quot;%s\&quot;,\&quot;%s\&quot;)&quot;</span> % (</span><br><span class="line">        <span class="built_in">str</span>(<span class="built_in">id</span>), <span class="string">&quot;UGRD&quot;</span>, <span class="built_in">str</span>(ls[<span class="number">5</span>]), <span class="built_in">str</span>(ls[<span class="number">4</span>]), <span class="built_in">str</span>(ls[<span class="number">6</span>]), <span class="number">100</span>, <span class="built_in">str</span>(ls[<span class="number">0</span>]))</span><br><span class="line">        cursor.execute(insert)</span><br><span class="line">conn.commit()</span><br><span class="line">cursor.close()</span><br><span class="line">conn.close()</span><br><span class="line"><span class="comment"># *v.csv导入数据库同理</span></span><br></pre></td></tr></table></figure><h4 id="数据分析"><a href="#数据分析" class="headerlink" title="数据分析"></a>数据分析</h4><h5 id="调整预测时刻风场"><a href="#调整预测时刻风场" class="headerlink" title="调整预测时刻风场"></a>调整预测时刻风场</h5><p>由于源数据的观测时间间隔是6小时，而烟团扩散模型输出一般是1h为间隔，因此需要对风场数据进行插值。</p><p>插值公式</p><p>$V_i = V(t_1)+[V(t_2)-V(t_1)].\frac{i}{n}$</p><p>$n = (t_2-t_1)/\Delta t$</p><p>式中： $V(t_1)$、$V(t_2)$—分别为第1和第2个观测时刻的风场值；</p><p>$\Delta t -$烟团释放时间步长；</p><p>$n$—为$t_1 、t_2$间隔内的时间步长数目；</p><p>$V_i$—表示$t_1 、t_2$间隔内第i个时间步长上的风场值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python线性插值代码</span></span><br><span class="line"><span class="keyword">from</span> pymysql <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">conn = connect(host=<span class="string">&#x27;localhost&#x27;</span>, port=<span class="number">3306</span>, user=<span class="string">&#x27;root&#x27;</span>, password=<span class="string">&#x27;123456&#x27;</span>, database=<span class="string">&#x27;rkpro&#x27;</span>, charset=<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">cursor = conn.cursor()</span><br><span class="line"><span class="built_in">id</span> = <span class="number">52489</span></span><br><span class="line"><span class="keyword">for</span> d <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">26</span>, <span class="number">28</span>):</span><br><span class="line">    <span class="keyword">for</span> h <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">19</span>, <span class="number">6</span>):</span><br><span class="line">        <span class="keyword">if</span> h == <span class="number">12</span>:</span><br><span class="line">            count1 = cursor.execute(<span class="string">&quot;select * from traj  where createtime = &#x27;2021-09-%s 12:00:00&#x27; ORDER BY id asc&quot;</span> % d)</span><br><span class="line">            list1 = cursor.fetchall()</span><br><span class="line">            count2 = cursor.execute(<span class="string">&quot;select * from traj  where createtime = &#x27;2021-09-%s 18:00:00&#x27; ORDER BY id asc&quot;</span> % d)</span><br><span class="line">            list2 = cursor.fetchall()</span><br><span class="line">        <span class="keyword">if</span> h == <span class="number">18</span>:</span><br><span class="line">            count1 = cursor.execute(<span class="string">&quot;select * from traj  where createtime = &#x27;2021-09-%s  18:00:00&#x27; ORDER BY id asc&quot;</span> % d)</span><br><span class="line">            list1 = cursor.fetchall()</span><br><span class="line">            count2 = cursor.execute(<span class="string">&quot;select * from traj  where createtime = &#x27;2021-09-%s 00:00:00&#x27; ORDER BY id asc&quot;</span> % (d+<span class="number">1</span>))</span><br><span class="line">            list2 = cursor.fetchall()</span><br><span class="line">        <span class="keyword">if</span> h == <span class="number">0</span>:</span><br><span class="line">            count1 = cursor.execute(<span class="string">&quot;select * from traj  where createtime = &#x27;2021-09-%s 00:00:00&#x27; order by id asc&quot;</span> % d)</span><br><span class="line">            list1 = cursor.fetchall()</span><br><span class="line">            count2 = cursor.execute(<span class="string">&quot;select * from traj  where createtime = &#x27;2021-09-%s 06:00:00&#x27; ORDER BY id asc&quot;</span> % d)</span><br><span class="line">            list2 = cursor.fetchall()</span><br><span class="line">        <span class="keyword">if</span> h == <span class="number">6</span>:</span><br><span class="line">            count1 = cursor.execute(<span class="string">&quot;select * from traj  where createtime = &#x27;2021-09-%s 06:00:00&#x27; ORDER BY id asc&quot;</span> % d)</span><br><span class="line">            list1 = cursor.fetchall()</span><br><span class="line">            count2 = cursor.execute(<span class="string">&quot;select * from traj  where createtime = &#x27;2021-09-%s 12:00:00&#x27; ORDER BY id asc&quot;</span> % d)</span><br><span class="line">            list2 = cursor.fetchall()</span><br><span class="line">        <span class="keyword">for</span> index, i <span class="keyword">in</span> <span class="built_in">enumerate</span>(list2):</span><br><span class="line">            a = (i[<span class="number">4</span>] - list1[index][<span class="number">4</span>]) / <span class="number">6</span></span><br><span class="line">            <span class="keyword">for</span> b <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">6</span>):</span><br><span class="line">                <span class="built_in">id</span> += b</span><br><span class="line">                insertSql = <span class="string">&quot;insert into traj (id, type, lat, lng , speed, height, createTime) values(\&quot;%s\&quot;, \&quot;%s\&quot;,\&quot;%s\&quot;,\&quot;%s\&quot;,\&quot;%s\&quot;,\&quot;%s\&quot;,\&quot;%s\&quot;)&quot;</span> % (</span><br><span class="line">                    <span class="built_in">str</span>(<span class="built_in">id</span>), <span class="string">&quot;UGRD&quot;</span>, <span class="built_in">str</span>(list1[index][<span class="number">2</span>]), <span class="built_in">str</span>(list1[index][<span class="number">3</span>]), <span class="built_in">str</span>(list1[index][<span class="number">4</span>] + a * b), <span class="number">100</span>,</span><br><span class="line">                    <span class="string">&quot;2021-09-%s 0%s:00:00&quot;</span> % (d, h + b))</span><br><span class="line">                cursor.execute(insertSql)</span><br><span class="line">conn.commit()</span><br><span class="line">cursor.close()</span><br><span class="line">conn.close()</span><br><span class="line"><span class="comment"># V线性插值同理</span></span><br></pre></td></tr></table></figure><h5 id="后向轨迹"><a href="#后向轨迹" class="headerlink" title="后向轨迹"></a>后向轨迹</h5><p>后向轨迹是高斯烟团模型应用的典型案例，根据风场的时空分布特征，可以描绘出烟团运动轨迹，考虑到烟团中化学成分的稳定性为2-3d，一般轨迹向后追溯48h，由于NOAA也提供了forecast hour数据集，存放在GFS系统里，也可以拿过来对未来3-4d的烟团轨迹进行模拟。这些模型已经被广泛应用在大气环境监测平台，如北京泛测的溯源分析模块。</p><p>后向轨迹以模拟受点为起始点，向后追溯，风从过去吹到现在，风场随时间和空间均发生变化，后向轨迹每个预测时刻的点位以及该点位的风向和风速与上一时刻点位的风向和风速有关系。</p><p>因此，计算分为3步：</p><p>1、确定下一时刻猜想位置（并不是最终位置），由当前时刻风向风速决定；</p><p>2、取猜想位置和当前位置的风速的平均值，以及风向；</p><p>3、根据当前位置和平均速度所前进的距离，计算出下一刻的最终位置。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">当前时刻为2021-09-27 18：00：00，向后追溯24h</span></span><br><span class="line"><span class="string">起始时刻应该为2021-09-26 18：00：00</span></span><br><span class="line"><span class="string">下一时刻是19：00：00</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">from</span> pymysql <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="comment"># 起始时刻风向、风速</span></span><br><span class="line">lat1 = <span class="number">40</span></span><br><span class="line">lng1 = <span class="number">80</span></span><br><span class="line">lat = <span class="number">40</span></span><br><span class="line">lng = <span class="number">80</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">25</span>):</span><br><span class="line">    conn = connect(host=<span class="string">&#x27;localhost&#x27;</span>, port=<span class="number">3306</span>, user=<span class="string">&#x27;root&#x27;</span>, password=<span class="string">&#x27;123456&#x27;</span>, database=<span class="string">&#x27;rkpro&#x27;</span>, charset=<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">    cursor = conn.cursor()</span><br><span class="line">    <span class="comment"># u</span></span><br><span class="line">    sql = <span class="string">&quot;SELECT speed FROM traj_u WHERE createtime = &#x27;2021-09-26 %s:00:00&#x27; AND lat = lat AND lng = lng&quot;</span> % (<span class="number">0</span> + i)</span><br><span class="line">    <span class="keyword">if</span> i &gt;= <span class="number">24</span>:</span><br><span class="line">        sql = <span class="string">&quot;SELECT speed FROM traj_u WHERE createtime = &#x27;2021-09-27 %s:00:00&#x27; AND lat = lat AND lng = lng&quot;</span> % (i - <span class="number">24</span>)</span><br><span class="line">    cursor.execute(sql)</span><br><span class="line">    u = cursor.fetchone()[<span class="number">0</span>]</span><br><span class="line">    <span class="comment"># v</span></span><br><span class="line">    sql = <span class="string">&quot;SELECT speed FROM traj_v WHERE createtime = &#x27;2021-09-26 %s:00:00&#x27; AND lat = lat AND lng = lng&quot;</span> % (<span class="number">0</span> + i)</span><br><span class="line">    <span class="keyword">if</span> i &gt;= <span class="number">24</span>:</span><br><span class="line">        sql = <span class="string">&quot;SELECT speed FROM traj_v WHERE createtime = &#x27;2021-09-27 %s:00:00&#x27; AND lat = lat AND lng = lng&quot;</span> % (i - <span class="number">24</span>)</span><br><span class="line">    cursor.execute(sql)</span><br><span class="line">    v = cursor.fetchone()[<span class="number">0</span>]</span><br><span class="line">    <span class="comment"># 纬度判定</span></span><br><span class="line">    <span class="keyword">if</span> <span class="number">0</span> &lt;= math.modf(lng)[<span class="number">0</span>] &lt; <span class="number">0.24</span>:</span><br><span class="line">        lng = <span class="built_in">int</span>(lng)</span><br><span class="line">    <span class="keyword">elif</span> <span class="number">0.25</span> &lt;= math.modf(lng)[<span class="number">0</span>] &lt; <span class="number">0.49</span>:</span><br><span class="line">        lng = <span class="built_in">int</span>(lng) + <span class="number">0.25</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="number">0.5</span> &lt;= math.modf(lng)[<span class="number">0</span>] &lt; <span class="number">0.74</span>:</span><br><span class="line">        lng = <span class="built_in">int</span>(lng) + <span class="number">0.5</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="number">0.75</span> &lt;= math.modf(lng)[<span class="number">0</span>] &lt; <span class="built_in">int</span>(lng) + <span class="number">1</span>:</span><br><span class="line">        lng = <span class="built_in">int</span>(lng) + <span class="number">0.75</span></span><br><span class="line">    <span class="comment"># 纬度判定</span></span><br><span class="line">    <span class="keyword">if</span> <span class="number">0</span> &lt;= math.modf(lat)[<span class="number">0</span>] &lt; <span class="number">0.24</span>:</span><br><span class="line">        lat = <span class="built_in">int</span>(lat)</span><br><span class="line">    <span class="keyword">elif</span> <span class="number">0.25</span> &lt;= math.modf(lat)[<span class="number">0</span>] &lt; <span class="number">0.49</span>:</span><br><span class="line">        lat = <span class="built_in">int</span>(lat) + <span class="number">0.25</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="number">0.5</span> &lt;= math.modf(lat)[<span class="number">0</span>] &lt; <span class="number">0.74</span>:</span><br><span class="line">        lat = <span class="built_in">int</span>(lat) + <span class="number">0.5</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="number">0.75</span> &lt;= math.modf(lat)[<span class="number">0</span>] &lt; <span class="built_in">int</span>(lat) + <span class="number">1</span>:</span><br><span class="line">        lat = <span class="built_in">int</span>(lat) + <span class="number">0.75</span></span><br><span class="line">    <span class="keyword">if</span> u &gt; <span class="number">0</span> <span class="keyword">and</span> v &gt; <span class="number">0</span>:</span><br><span class="line">        dirt = <span class="number">270</span> - math.atan(v / u) * <span class="number">180</span> / math.pi</span><br><span class="line">    <span class="keyword">elif</span> u &lt; <span class="number">0</span> <span class="keyword">and</span> v &gt; <span class="number">0</span>:</span><br><span class="line">        dirt = <span class="number">90</span> - math.atan(v / u) * <span class="number">180</span> / math.pi</span><br><span class="line">    <span class="keyword">elif</span> u &lt; <span class="number">0</span> <span class="keyword">and</span> v &lt; <span class="number">0</span>:</span><br><span class="line">        dirt = <span class="number">90</span> - math.atan(v / u) * <span class="number">180</span> / math.pi</span><br><span class="line">    <span class="keyword">elif</span> u &gt; <span class="number">0</span> <span class="keyword">and</span> v &lt; <span class="number">0</span>:</span><br><span class="line">        dirt = <span class="number">270</span> - math.atan(v / u) * <span class="number">180</span> / math.pi</span><br><span class="line">    d = math.sqrt(math.<span class="built_in">pow</span>(v*<span class="number">3600</span>, <span class="number">2</span>) + math.<span class="built_in">pow</span>(u*<span class="number">3600</span>, <span class="number">2</span>))</span><br><span class="line">    earth_r = <span class="number">6371000</span></span><br><span class="line">    lng1 = d * math.sin(math.radians(dirt)) / (<span class="number">2</span> * math.pi * earth_r * math.cos(math.radians(lat1))) * <span class="number">360</span> + lng1</span><br><span class="line">    lat1 = d * math.cos(math.radians(dirt)) / (<span class="number">2</span> * math.pi * earth_r) * <span class="number">360</span> + lat1</span><br><span class="line">conn.commit()</span><br><span class="line">cursor.close()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><h5 id="轨迹输出"><a href="#轨迹输出" class="headerlink" title="轨迹输出"></a>轨迹输出</h5><p>上面得到2021-09-27 00 06 12 18四个时刻的后向轨迹点数据集</p><p>点数据由xy导入ArcGis，输出如下图：</p><img src="https://i.loli.net/2021/10/08/NZC5RJxrUtTQ9Ac.png" style="zoom: 50%;" /><p>点击“工具箱-要素-点集成线”</p><img src="C:\Users\YZ Tang\Pictures\Saved Pictures\轨迹.png" style="zoom:50%;" /><p>缺少地图和要素</p><p>先加入底图，调用腾讯地图api，请求新疆边界坐标</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://apis.map.qq.com/ws/district/v1/search?&amp;keyword=650000&amp;get_polygon=2&amp;key=OISBZ-PUJYJ-JASFH-F6HZC-XVR7J-OKF4E&quot;</span></span><br><span class="line">res = requests.get(url).json()</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line">x = res[<span class="string">&quot;result&quot;</span>][<span class="number">0</span>][<span class="number">0</span>][<span class="string">&quot;polygon&quot;</span>][<span class="number">0</span>][::<span class="number">2</span>]</span><br><span class="line">y = res[<span class="string">&quot;result&quot;</span>][<span class="number">0</span>][<span class="number">0</span>][<span class="string">&quot;polygon&quot;</span>][<span class="number">0</span>][<span class="number">1</span>::<span class="number">2</span>]</span><br><span class="line">df = pd.DataFrame(&#123;<span class="string">&quot;x&quot;</span>: x, <span class="string">&quot;y&quot;</span>: y&#125;)</span><br><span class="line">df.to_csv(<span class="string">r&quot;C:\Users\YZ Tang\Desktop\geodata\polygon_xj.csv&quot;</span></span><br></pre></td></tr></table></figure><img src="https://i.loli.net/2021/10/08/c9tqXJ4EFynTWpa.png"  /><h5 id="聚类分析"><a href="#聚类分析" class="headerlink" title="聚类分析"></a>聚类分析</h5><h5 id="PSCF"><a href="#PSCF" class="headerlink" title="PSCF"></a>PSCF</h5><p>WGT</p><p>​                                            </p><p>​                                            </p><h3 id="高斯烟羽扩散模型"><a href="#高斯烟羽扩散模型" class="headerlink" title="高斯烟羽扩散模型"></a>高斯烟羽扩散模型</h3><h2 id="Python实现"><a href="#Python实现" class="headerlink" title="Python实现"></a>Python实现</h2><h3 id="底层地图"><a href="#底层地图" class="headerlink" title="底层地图"></a>底层地图</h3><h3 id="创建渔网"><a href="#创建渔网" class="headerlink" title="创建渔网"></a>创建渔网</h3><h3 id="引入Arcpy"><a href="#引入Arcpy" class="headerlink" title="引入Arcpy"></a>引入Arcpy</h3><p>Arcpy包含了很多处理地理数据的包，通过ArcGis的Python脚本窗口导入，也可以从软件自带的Python2.7 IDE导入。</p><p><code>import Arcpy</code></p><p>同时也可以引入一些python的数据处理库，如pandas</p><p><code>import pandas as pd</code></p><p>关于arcpy最全面的介绍，可以转到ArcGis的<a href="https://pro.arcgis.com/zh-cn/pro-app/latest/help/main/welcome-to-the-arcgis-pro-app-help.htm">帮助文档</a>，也是最好的学习工具。</p><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2021/09/27/vPi4LrAKhnNdp9u.png&quot; alt=&quot;arcpy&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;高斯扩散模型&quot;&gt;&lt;a href=&quot;#高斯扩散模型&quot; class=&quot;headerlink&quot; title=</summary>
      
    
    
    
    
    <category term="高斯扩散模型" scheme="https://tangyazhou123.github.io/tags/%E9%AB%98%E6%96%AF%E6%89%A9%E6%95%A3%E6%A8%A1%E5%9E%8B/"/>
    
    <category term="python" scheme="https://tangyazhou123.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://tangyazhou123.github.io/2021/07/23/hello-world/"/>
    <id>https://tangyazhou123.github.io/2021/07/23/hello-world/</id>
    <published>2021-07-23T11:08:35.985Z</published>
    <updated>2021-07-23T11:08:35.985Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
